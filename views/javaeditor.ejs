<%- include('partials/dashboardheader', { title: 'Code Editor', role: role }) %>

<h1>Online Compiler</h1>

<div class="container-fluid full-height">
    <div class="row py-2">
        <div class="col-md-6">
            <label for="language-select" class="form-label">Select Language:</label>
            <select id="language-select" class="form-select">
                <option value="java">java</option>
               
            </select>
        </div>
        <div class="col-md-6 text-end">
            <button id="save-btn" class="btn btn-primary">Save</button>
            <button id="run-btn" class="btn btn-success">Run</button>
        </div>
    </div>

    <!-- Code Editor -->
    <div class="row mt-2">
        <div class="col-md-12">
            <div id="editor" style="height: 400px;"></div>
        </div>
    </div>

    <!-- Terminal Output -->
    <div class="row mt-3">
        <div class="col-md-12">
            <h3>Terminal</h3>
            <div id="terminal" style="height: 150px; background-color: #000; color: #fff;"></div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/xterm/lib/xterm.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.22.3/min/vs/loader.min.js"></script>

<script>
    const term = new Terminal();
    term.open(document.getElementById('terminal'));

    const languageToExtension = {
        java: 'java',
        
    };

    let editor;
    let currentLanguage = 'java';
    let currentFileName = 'Program.java';

    // Initialize Monaco Editor
    require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.22.3/min/vs' }});
    require(['vs/editor/editor.main'], function () {
        editor = monaco.editor.create(document.getElementById('editor'), {
            value: '',
            language: currentLanguage,
            theme: 'vs-dark',
            automaticLayout: true
        });
    });

    // Handle Language Change
    document.getElementById('language-select').addEventListener('change', function() {
        currentLanguage = this.value;
        monaco.editor.setModelLanguage(editor.getModel(), currentLanguage);
        currentFileName = `program.${languageToExtension[currentLanguage]}`;
        //alert(currentFileName);
    });

    // Save the file
    document.getElementById('save-btn').addEventListener('click', () => {
        const code = editor.getValue();

        fetch('/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ code, fileName: currentFileName })
            
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('File saved successfully!');
            } else {
                alert(`Error saving file: ${data.error}`);
            }
        });
    });

    // Run the code
    document.getElementById('run-btn').addEventListener('click', () => {
        const code = editor.getValue();
        const language = document.getElementById('language-select').value;

        fetch('/compile-run', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ code, fileName: currentFileName, language })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                term.write(`\r\n${data.error}\r\n`); // Show errors in the terminal
            } else {
                // Create WebSocket connection after compilation
                const socket = new WebSocket('ws://localhost:3000');

                // WebSocket open event
                socket.onopen = () => console.log('WebSocket connection established.');

                // WebSocket message event to handle program output
                socket.onmessage = (event) => term.write(event.data);

                // WebSocket close event
                socket.onclose = () => console.log('WebSocket connection closed.');

                // Handle terminal input (send it to WebSocket)
                term.onData(data => socket.send(data));
            }
        })
        .catch(error => {
        term.write(`\r\nError: ${error.message}\r\n`);
    });
    });
</script>

<%- include('partials/dashboardfooter') %>
